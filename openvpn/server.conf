###########################################################
#######                   OpenVPN                   #######
#######                       Server                #######
###########################################################
#
# Arquivo de configuracao para o servidor
# Criado por Tobias <tobiasette@gmail.com>
# v0.2 Ultima alteração: 30/05/2012
# testado nas seguintes versoes do openvpn:
# \-> OpenVPN 2.2.0 x86_64 (CentOS 6)
# \-> OpenVPN 2.2.1 i486-linux-gnu (Debian squeeze)
# \-> OpenVPN 2.2.1 x86_64-linux-gnu (Debian wheezy/sid) 

##############################
#     Notas
##############################

# Carregue o module tun do kernel (modprobe tun) e
# certifique-se que ele estah sendo carregado na
# inicializacao do sistema; o mais comum eh ser
# chamado no arquivo /etc/modules
# Para testar os arquivos de configuracao:
# openvpn --config /etc/openvpn/arquivo.conf
# Os hosts tem que estar com o horario correto; utilize
# ntpdate -u pool.ntp.org para atualizar


##############################
#     Dados da conexao
##############################

# Define o protocolo a ser utilizado
# Por padrao (e caso omtido) o protocolo udp eh utilizado.
# Utilizar udp preferencialmente, pois este protocolo
# nao faz correcao/redundancia dos pacotes. O openvpn
# apenas cria a conexao, em cima dela rodarao os protocolos
# cabiveis (tcp, udp, etc), nao sendo necessario utilizar
# correcao de erros nesta camada.
# Para utiliza protocolo tcp:
# proto tcp-server
	proto udp

# Especifica a porta udp que na qual o openvpn ira rodar.
# Por padrao (e caso omitida) a porta 1194 eh utilizada
	port 12005

##############################
#     Interface de rede
##############################

# Define qual interface, e de qual tipo, ira responder
# pela VPN
# No tun o trafego tcp/udp/ip da rede eh roteado eliminando pacotes de
# broadcast, no tap tudo eh transmitido.
	dev tun

##### IP manual
# para interface tun (local, remoto)
# ifconfig 192.168.100.1 192.168.100.2
# para interface tap (local, mascara de rede)
# ifconfig 192.168.100.1 255.255.255.0
# Para rotear os pacotes, utilize:
# echo 1 > /proc/sys/net/ipv4/ip_forward
# iptables -t nat -s 192.168.100.2 -A POSTROUTING -o eth0 -j MASQUERADE

##### Servidor de ips
# faixa de endereco e mascara
	server 192.168.200.0 255.255.255.0
# envia faixa de ips e mascara da rede local do servidor, para
# serem adicionados a tabela de roteamento do cliente
	push "route 192.168.200.0 255.255.255.0"
# Armazena os ips utilizados pelos clientes e tenta reutilia-los nas
# proximas conexoes (nao eh necessario criar o arquivo)
	ifconfig-pool-persist /etc/openvpn/ips.txt
# Para rotear os pacotes, utilize:
# echo 1 > /proc/sys/net/ipv4/ip_forward
# iptables -t nat -s 192.168.100.0/24 -A POSTROUTING -o eth0 -j MASQUERADE

##############################
#   Qualidade da conexao
##############################

# Pinga o host remoto a cada $x segundos sem atividade na rede, se ele
# nao responder por $z segundos a conexao eh reiniciada.
# Quando a conexao eh interrompida o cliente tenta restabelece-la
# periodicamente
# Uso: keepalive $x $z
	keepalive 10 120

# Compacta os dados da conexao utilizando o pacote lzo (deve estar
# instalado no host), com um pequeno aumento de processamento.
# comp-lzo

# mantem as chaves carregadas mesmo durante o reinicio do servico.
# persist­key

# mantem o tunel aberto mesmo durante o reinicio do servico.
# persist­tun

# mantem o tunel aberto mesmo se o ip do outro host mudar
# float

# lmita a banda (soma de todos os clientes) de saida do Openvpn a N bytes.
#shaper 51200

# define numero de usuarios conectados a vpn
	max-clients 10


##############################
#      Autenticacao
##############################

# Utilizando a mesma chave, estatica, nos dois hosts
# para gerar: openvpn --genkey --secret /etc/openvpn/keys/estatica.key
# depois copiar para o outro host
# secret estatica.key

# Define que as solicitacoes de conexao devem ser encriptadas
# com chave.key. Copiar chave.key para os demais hosts.
# para gerar: openvpn --genkey --secret /etc/openvpn/keys/chave.key
# tls-auth /etc/openvpn/keys/chave.key

##### Utilizando certificados X509
# Copie o diretorio easy-rsa para /etc/openvpn
# cp -a /usr/share/doc/openvpn/examples/easy-rsa /etc/openvpn/
# ou cp -a /usr/share/doc/openvpn-2.2.0/easy-rsa /etc/openvpn/
# cd /etc/openvpn/easy-rsa/2.0/
# edite as ultimas linhas do arquivo vars: vim vars
# inclua o arquivo vars no shell atual: source vars
# limpe o ambiente: ./clean-all
# execute o script para criar o CA: ./build-ca
# o arquivo /etc/openvpn/easy-rsa/2.0/keys/ca.key eh o certificado
# raiz e deve ser mantido em seguranca
# Gerar o certificado do servidor. Preencher Common Name.
# Caso preencha a senha, ela sera solicitada cada vez que o o certificado for usado.
# ./build-key-server $nomeServidor
# Gerar arquivo contendo parametros Diffie Hellman para que
# os hosts troquem as chaves utilizando uma conexao segura:
# ./build-dh; rm keys/*.csr
# Copiar arquivos para o diretorio final
# cd keys; mkdir /etc/openvpn/keys; cp -a ca.crt $nomeServidor.crt $nomeServidor.key dh1024.pem /etc/openvpn/keys/

##### Adicionar novo cliente
# Gerar as chaves para os clientes: (preencher Common Name):
# ./build-key $nomeCliente
# Copiar os seguintes arquivos para o cliente:
# $nomeCliente.crt, $nomeCliente.key, ca.crt, dh1024.pem

##### Revogar certificados
# cd /etc/openvpn/easy-rsa; source vars; ./revoke-full $nomeCliente; service openvpn reload
# crl-verify /etc/openvpn/easy-rsa/keys/crl.pem

# Parametro necessario para utilizar conexa com certificados X509
	tls-server

# Caminho para o arquivo contendo parametros Diffie Hellman
	dh /etc/openvpn/keys/dh1024.pem

# Local do arquivo .ca oriundo do servidor
	ca /etc/openvpn/keys/ca.crt

# Local do arquivo .crt do servidor
	cert /etc/openvpn/keys/valfenda.crt

# Local da chave do servidor
	key /etc/openvpn/keys/valfenda.key


##############################
#      Referencias
##############################

# www.hardware.com.br/tutoriais/openvpn/
# www.hardware.com.br/tutoriais/openvpn_2/

#EOF
