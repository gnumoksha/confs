###########################################################
#######                   OpenVPN                   #######
#######                       Server                #######
###########################################################
#
# Arquivo de configuracao para o servidor
# Criado por Tobias Sette <contato@tobias.ws>
# 27/03/2012 - v0.1 - Início
# 30/05/2012 - v0.2 - (OpenVPN 2.2.x)
# 10/07/2015 - v0.3 - reformulado com base no OpenVPN do Debian Jessie (OpenVPN 2.3.x)
#
# Este arquivo de configuração foi testado, sem modificações significativas,
# nas seguintes versões do OpenVPN:
#-> OpenVPN 2.3.4 x86_64 (Debian 8.1)


##############################
#            Notas
##############################

# Carregue o module tun do kernel (modprobe tun) e
# certifique-se que ele está sendo carregado na
# inicializacao do sistema. O mais comum é ser
# chamado no arquivo /etc/modules

# Para testar os arquivos de configuracao:
# openvpn --config /etc/openvpn/arquivo.conf

# Para fazer NAT, execute algo semelhante à:
# sysctl -w net.ipv4.ip_forward=1
# iptables -t nat -s $IP_REDE/$MASCARA_REDE -A POSTROUTING -o $PORTA_INTERNET -j MASQUERADE

# Os hosts tem que estar com o horario correto; utilize
# ntpdate -u pool.ntp.org para atualizar

# Este arquivo deve funcionar em diversos sistemas. No windows,
# lembre-se de escapar nomes completos de arquivos, como em
# "C:\\Foo\\Bar\\foo.key"


##############################
#     Dados da conexão
##############################

# Em qual ip local o OpenVPN ficará escutando?
;local 192.168.20.1

# Define o protocolo a ser utilizado.
# Por padrao (e caso omtido) o protocolo udp é utilizado.
# Utilizar udp preferencialmente, pois este protocolo
# não faz correção/redundancia dos pacotes. O OpenVPN
# apenas cria a conexão, em cima dela rodarão os protocolos
# cabiveis (tcp, udp, etc), não sendo necessário utilizar
# correção de erros nesta camada.
# Para utiliza protocolo tcp:
;proto tcp-server
proto udp

# Especifica a porta udp que na qual o openvpn ira rodar.
# Por padrao (e caso omitida) a porta 1194 é utilizada.
# Caso você já rodar múltiplas instâncias do OpenVPN, use
# uma porta diferente para cada.
port 1194


##############################
#     Interface de rede
##############################

# Para executar as ações definidas nos comandos abaixo, pode ser necessário
# realizar NAT. Para isso vejo o comentário na seção NOTAS

# Define qual interface, e de qual tipo, ira responder
# pela VPN
# No tun o trafego da rede é roteado eliminando pacotes de
# broadcast, no tap é criado uma interface ethernet onde tudo é transmitido.
# No windows você deve especificar um número para a interface, como em tun0.
dev tun

# No Windows é necessário especificar o nome do adapator TAP-Win32
# a partir do painel de conexões de rede, se você tiver mais de um.
;dev-node MyTap

## IP manual
# para interface tun (local, remoto)
# ifconfig 192.168.100.1 192.168.100.2
# para interface tap (local, mascara de rede)
# ifconfig 192.168.100.1 255.255.255.0

## Servidor de ips
# faixa de endereco e mascara
server 10.8.0.0 255.255.255.0
#
# Armazena os ips utilizados pelos clientes e tenta reutilizá-los nas
# proximas conexões (não é necessário criar o arquivo)
ifconfig-pool-persist /etc/openvpn/ips.txt

## Bridges. Ver [3] para mais informações
# Configura o modo para ethernet bridging
;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
#
# Clientes utilizam DHCP do servidor
;server-bridge


##############################
#           Rotas
##############################

# Envia rotas da rede local do servidor para
# serem adicionados a tabela de roteamento do cliente. Possibilitando
# que este veja subrede atravás do servidor. Lembre-se que estas subredes
# também precisam saber como rotear para a subrede do OpenVPN

# Envia uma rota específica
;push "route 10.8.0.0 255.255.255.0"

# Faz com que todo o tráfego do cliente, direcionado ao seu gateway, passe pelo
# OpenVPN. Isso faz com que todo o tráfego IP, como sites e requisições DNS,
# passem pelo OpenVPN.
# Pode ser necessário fazer NAT ou bridge, para possibilitar que o cliente
# acesse à internet através deste servidor.
# Para NAT vejo o comentário na seção NOTAS.
;push "redirect-gateway def1 bypass-dhcp"

# Algumas configurações específicas para Windows podem ser definidas, tais como
# DNS e WINS.
;push "dhcp-option DNS 208.67.222.222"
;push "dhcp-option DNS 208.67.220.220"

# Permite que os clientes possam se ver na rede. Por padrão eles veêm apenas o
# servidor.
# Para forçar os clientes à apenas verem o servidor, configure seu firewal
;client-to-client


##############################
#   Qualidade da conexão
##############################

# Pinga o host remoto a cada $x segundos sem atividade na rede, se ele
# nao responder por $z segundos a conexão é reiniciada.
# Quando a conexão é interrompida o cliente tenta restabelece-la
# periodicamente
# Uso: keepalive $x $z
keepalive 10 120

# Compacta os dados da conexão utilizando o pacote lzo (deve estar
# instalado no host), com um pequeno aumento de processamento.
# Se estiver habilitado no servidor, o cliente também deve habilitar
comp-lzo

# mantem as chaves carregadas mesmo durante o reinicio do serviço.
persist-key

# mantem o tunel aberto mesmo durante o reinicio do serviço.
persist-tun

# mantem o tunel aberto mesmo se o ip do outro host mudar
;float

# lmita a banda (soma de todos os clientes) de saida do Openvpn a N bytes.
;shaper 51200

# define numero de usuarios conectados simultaneamente ao OpenVPN
max-clients 5


##############################
#      Autenticacao
##############################

# Permite que mais de um cliente se conecte com o mesmo certificado/chave.
# Não é uma boa prática habilitar esta funcionalidade.
;duplicate-cn

# Utilizando a mesma chave, estatica, nos dois hosts
# para gerar: openvpn --genkey --secret /etc/openvpn/keys/estatica.key
# depois copiar para o outro host
;secret estatica.key

# Define que as solicitações de conexão devem ser encriptadas
# com ta.key. É útil para bloquear ataques DoS e flood na porta UDP.
# O segundo parâmetro deve ser 0 no servidor e 1 no cliente.
# Copiar ta.key para cada host que vá se conectar.
# para gerar: openvpn --genkey --secret /etc/openvpn/keys/ta.key
;tls-auth /etc/openvpn/keys/ta.key 0

# Define qual a cifra criptográfica. Esta configuração deve ser igual no
# cliente.
;cipher BF-CBC        # Blowfish (padrão)
;cipher AES-128-CBC   # AES
;cipher DES-EDE3-CBC  # Triple-DES


##############################
#      Certificados X509
##############################

# apt-get install easy-rsa -y; cd /etc/openvpn/; make-cadir easy-rsa; cd easy-rsa
# Edite o arquivo vars, geralmente o mais interessante são as últimas linhas.
# Inclua o arquivo vars no shell atual: source vars
# limpe o ambiente: ./clean-all
#
# execute o script para criar o CA: ./build-ca
# o arquivo /etc/openvpn/easy-rsa/2.0/keys/ca.key é o certificado
# raiz e deve ser mantido em segurança
#
# Gerar o certificado do servidor. Preencher Common Name e usar o mesmo valor
# ao preencher o certificado de cada cliente
# Caso preencha a senha, ela sera solicitada cada vez que o o certificado for usado.
# ./build-key-server $nomeServidor
#
# Gerar arquivo contendo parametros Diffie Hellman para que
# os hosts troquem as chaves utilizando uma conexão segura:
# ./build-dh
#
# Excluir arquivos desnecessários: rm keys/*.csr

# Adicionar novo cliente
# Gerar as chaves para os clientes: (preencher Common Name):
# ./build-key $nomeCliente
#
# Copiar os seguintes arquivos para o cliente:
# $nomeCliente.crt, $nomeCliente.key, ca.crt, dh2048.pem

# Revogar certificados
# cd /etc/openvpn/easy-rsa; source vars; ./revoke-full $nomeCliente; systemctl reload openvpn
# crl-verify /etc/openvpn/easy-rsa/keys/crl.pem

# Parametro necessario para utilizar conexão com certificados X509
tls-server

# Caminho para o arquivo contendo parametros Diffie Hellman
dh /etc/openvpn/easy-rsa/keys/dh2048.pem

# Local do arquivo de certificado (.crt) da unidade certificadora
ca /etc/openvpn/easy-rsa/keys/ca.crt

# Local do arquivo de certificado (.crt) do servidor
cert /etc/openvpn/easy-rsa/keys/$nomeServidor.crt

# Local da chave (.key) do servidor. Este arquivo deve ser mantido secreto
key /etc/openvpn/easy-rsa/keys/$nomeServidor.key


##############################
#           Outros
##############################

# É uma boa prática diminuir os privilégios do OpenVPN após a inicialização.
# Utilize estas opções em clientes não Windows.
# Note que as opções persist-key e persist-tun podem ser habilitadas
# para evitar erros de acesso a recursos que podem ficam indisponíveis depois
# da redução de privilégios
user nobody
group nogroup

# Grava um curto arquivo de status mostrando conexões atuais. O arquivo é
# truncado e reescrito a cada minuto.
status openvpn-status.log

# Por padrão as mensagens de log vão para o syslog (ou no Windows, se rodando
# como serviço, vão para o diretório "\Program Files\OpenVPN\log"). Utilize log
# ou log-append para sobrescrever este comportamento.
# log irá truncar o arquivo de log a cda inicialização do OpenVPN, enquanto
# log-append irá acrescentar nele. Use um dos dois.
;log         openvpn.log
;log-append  openvpn.log

# Define o quão verboso será o log.
# 0 é silencioso, exceto por erros fatais
# 4 é rasoável para o uso geral
# 5 e 6 podem ajudá-lo a debugar problemas de conexão
# 9 é extremamente verboso
verb 3

# Ignora mensagens repetidas. Até x mensagens sequenciais da mesma categoria
# serão escritas no log
;mute 20


##############################
#      Referencias
##############################

# [0] www.hardware.com.br/tutoriais/openvpn/
# [1] www.hardware.com.br/tutoriais/openvpn_2/
# [2] /usr/share/doc/openvpn/README.Debian.gz
# [3] /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz

#EOF